// Configuration file for example test 1

// Description: when load_from_file is true, the training points are given by TS_Points.txt
//              when load_from_file is false, these points are built according to params_num, params_low, params_high
//              these cases should agree with one another up to finite arithmetic effects
//
// NOTE: this example is described more fully in README

// physical domain [x_min,x_max], discrete inner products use quad_points points
x_min       = 40.0;                  // (double) lower value x_min
x_max       = 1024.0;                // (double) upper value x_max
quad_points = 1969;                  // (int) total number of frequency points

// model information
model_name = "TaylorF2_PN3pt5";     // name of gravitational waveform model (needs to have corresponding entry in FillTrainingSet)

// inner product information
quad_type       = 1;                  // (int) 0 = LGL, 1 = Reimman sum, 2 = user-defined (via input files)
weighted_inner  = false;              // (bool) whether to include a weight W(x): \int W(x) f(x) g(x)

// parameter domain and its sampling 
param_dim      = 2;                       // (int) number of paramteric dimensions (currently supports 2)
load_from_file = true;                    // (bool) load training points from file
p1_scale       = 4.9267398257952518e-06;  // solar mass to seconds. [Solar Mass in KG] * G / c^2 (G = 6.67428E-11, SolarMass = 1.98892e30, 299792458.0)
p2_scale       = 4.9267398257952518e-06;  // solar mass to seconds. [Solar Mass in KG] * G / c^2 (G = 6.67428E-11, SolarMass = 1.98892e30, 299792458.0)

//... these parameter matter if load_from_file = false
//params_num  = [30,30];    // params_num[i] is the number of samplings in the interval [param_low[i],param_high[i]]
//params_low  = [1.0,1.0];  // lower interval of each parameter (m1 and m2)
//params_high = [3.0,3.0];  // upper interval of each parameter (m1 and m2)

//... these matter if load_from_file = true
ts_file             = "example1/TS_Points.txt";   // location of file containing ts points

// greedy algorithm information
seed           = 0;                     // (int) greedy algorithm global index seed
tol            = 1e-12;                 // (double) greedy algorithm tolerance achieving \| app \|^2
max_RB         = 300;                   // (int) estimated number of RB (reasonable upper bound)

// output information
output_dir         = "example1_output";
output_data_format = "txt";                // bin (via gsl routines) or txt currently suppported


