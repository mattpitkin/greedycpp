The following heap memory allocations comprise the majority of memory usage.
Listed are those that scale like number of processors, max_rb, and ts_size*param_dim.

Format... (setting) file: allocation

Allocated on each worker proc:

GreedyCpp/training_set.cpp:   params_    = new double*[ts_size_];
GreedyCpp/training_set.cpp:   params_[j] = new double[param_dim_];
size(params_) = sizeof(double)*ts_size*param_dim

GreedyCpp/training_set.cpp:    mystart_         = new int[numprocs_worker];
GreedyCpp/training_set.cpp:    myend_           = new int[numprocs_worker];
GreedyCpp/training_set.cpp:    matrix_sub_size_ = new int[numprocs_worker];
size(above 3) = 3*sizeof(int)*numprocs_worker ~ sizeof(double)*numprocs_worker

GreedyCpp/greedy.cpp:    project_coeff = gsl_matrix_complex_alloc(max_RB,ts->matrix_sub_size()[rank]);
size(projec_coeff) = 2*sizeof(double)*max_RB*matrix_sub_size()[rank-1] 

GreedyCpp/greedy.cpp:    TS_gsl = gsl_matrix_complex_alloc(ptspace_class->ts_size(),xQuad->size);
GreedyCpp/greedy.cpp:    TS_gsl = gsl_matrix_complex_alloc(ptspace_class->matrix_sub_size()[rank-1],xQuad->size);
Size(TS_gsl) = 2*sizeof(double)*xQuad_size*matrix_sub_size()[rank-1] 

Total on worker proc = sizeof(double)*[ts_size*param_dim + numprocs_worker + 2*max_RB*matrix_sub_size()[rank-1] + 2*xQuad_size*matrix_sub_size()[rank-1] ]

Since matrix_sub_size()[rank-1] is about ts_size/numprocs_worker

Total on worker proc = sizeof(double)*[ts_size*param_dim + numprocs_worker + 2*max_RB*ts_size/numprocs_worker + 2*xQuad_size*ts_size/numprocs_worker ]

and whenever ts_size >> numprocs_worker we have 

Total on worker proc = sizeof(double)*ts_size[param_dim + 2*max_RB/numprocs_worker + 2*xQuad_size/numprocs_worker ]


Allocated on master proc:

GreedyCpp/greedy.cpp:    worst_workers_mpi = new int[size];
GreedyCpp/greedy.cpp:    worst_errs_mpi    = new double[size];
size(above 2) ~ 2*sizeof(double)*(numprocs_worker)

GreedyCpp/greedy.cpp:    RB_space          = gsl_matrix_complex_alloc(max_RB,cols);
Size(RB_space) = 2*sizeof(double)*xQuad_size*max_RB 

GreedyCpp/greedy.cpp:    R_matrix          = gsl_matrix_complex_alloc(max_RB,max_RB);
Size(R_matrix) = 2*sizeof(double)*max_RB^2

Total on master proc = 2*sizeof(double)*[numprocs_worker + xQuad_size*max_RB + max_RB^2]

