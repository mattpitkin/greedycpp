// Example configuration file for binary barycentering time delay

// Description: when load_from_file is true, the training points are given by TS_Points.txt
//              when load_from_file is false, these points are built according to params_num, params_low, params_high
//              these cases should agree with one another up to finite arithmetic effects
//
// NOTE: this example is described more fully in README

// physical domain [x_min,x_max], discrete inner products use quad_points points
x_min       = 900000000.0;     // (double) lower value of GPS time stamps 
x_max       = 900086400.0;     // (double) upper value of GPS time stamps (one day)
quad_points = 1400;            // (int) total number of time points (one point per minute)

// model information
model_name = "BinaryBarycenter_BTASINI2";  // name of waveform model

// inner product information
quad_type       = 1;           // (int) 0 = LGL, 1 = Reimman sum, 2 = user-defined (via input files)
weighted_inner  = false;       // (bool) whether to include a weight W(x): \int W(x) f(x) g(x)
//quad_nodes_file = "timestamps.txt"; // use quad_type = 2 to use this file

// parameter domain and its sampling 
param_dim      = 3;                 // (int) number of paramteric dimensions (w0, T0, ecc)
load_from_file = true;              // (bool) load training points from file
p1_scale       = 1.0;               // (scaling from w0)
p2_scale       = 1.0;               // (scaling for T0)
p3_scale       = 1.0;               // (scaling for eccentricity)

//... these parameter matter if load_from_file = false
params_num  = [100,100];    // params_num[i] is the number of samplings in the interval [param_low[i],param_high[i]]
params_low  = [0.0,-1.570796326794897];  // lower interval of each parameter (RA and dec) (modulo scalings above)
params_high = [6.283185307179586,1.570796326794897];   // upper interval of each parameter (RA and dec) (modulo scalings above)

//... these matter if load_from_file = true
ts_file             = "../TS_points.txt";   // location of file containing ts points

// greedy algorithm information
seed           = 0;                     // (int) greedy algorithm global index seed
tol            = 1e-7;                  // (double) greedy algorithm tolerance achieving \| app \|^2
max_RB         = 500;                   // (int) estimated number of RB (reasonable upper bound)

// run type information
export_tspace = true;                  // if false, normal greedy algorithm. if true (number of procs must be 1) then no greedy, training space written to file

// output information
output_dir         = ".";
output_data_format = "both";                // "bin" (gsl binary), "txt", "npy" (python numpy binary) or "both" (="txt" + "bin")
